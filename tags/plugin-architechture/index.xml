<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>plugin-architechture on Ishmam Hossain</title><link>https://ishmam-hossain.github.io/tags/plugin-architechture/</link><description>Recent content in plugin-architechture on Ishmam Hossain</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©ishmam.dev@gmail.com</copyright><lastBuildDate>Thu, 04 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ishmam-hossain.github.io/tags/plugin-architechture/index.xml" rel="self" type="application/rss+xml"/><item><title>Pytest &amp; it's plugin architecture</title><link>https://ishmam-hossain.github.io/posts/pytest-plugin-architecture/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/posts/pytest-plugin-architecture/</guid><description>pytest is a popular Python testing framework that provides a flexible and extensible way to write tests for your code. One of the key strengths of pytest is its plugin architecture, which allows you to customize and extend the behavior of the framework to meet your specific needs.
One such plugin is pytest-django, which provides support for testing Django applications with pytest. In this blog post, we&amp;rsquo;ll take a closer look at the plugin architecture of pytest and pytest-django and explore how plugins can be used to customize and enhance the testing process.</description></item></channel></rss>
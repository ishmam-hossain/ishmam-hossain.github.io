<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ishmam Hossain</title><link>https://ishmam-hossain.github.io/</link><description>Recent content on Ishmam Hossain</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©ishmam.dev@gmail.com</copyright><lastBuildDate>Thu, 30 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ishmam-hossain.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Pytest &amp; it's plugin architecture</title><link>https://ishmam-hossain.github.io/posts/pytest-plugin-architecture/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/posts/pytest-plugin-architecture/</guid><description>pytest is a popular Python testing framework that provides a flexible and extensible way to write tests for your code. One of the key strengths of pytest is its plugin architecture, which allows you to customize and extend the behavior of the framework to meet your specific needs.
One such plugin is pytest-django, which provides support for testing Django applications with pytest. In this blog post, we&amp;rsquo;ll take a closer look at the plugin architecture of pytest and pytest-django and explore how plugins can be used to customize and enhance the testing process.</description></item><item><title>Introducing strictpy: A Strict Typing Library for Python</title><link>https://ishmam-hossain.github.io/posts/strictpy/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/posts/strictpy/</guid><description>As Python projects grow in complexity, maintaining type safety becomes increasingly important to ensure code stability and reduce potential bugs. While Python&amp;rsquo;s dynamic typing system provides a lot of flexibility, it can sometimes lead to type-related issues that can be difficult to debug. That&amp;rsquo;s where strictpy comes in - a Python library that provides strict typing capabilities to Python 3.x. Developed by Senior Software Engineer Ishmam Hossain, strictpy makes it easy to define and enforce strict types for your Python code.</description></item><item><title>Who am I?</title><link>https://ishmam-hossain.github.io/about/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/about/</guid><description>Hi, I&amp;rsquo;m Ishmam, a Senior Software Engineer and a Team Lead with a passion for building scalable and reliable applications. I have 5 years of experience in the industry and am proficient in Python, Django, Git, Redis, MongoDB, and PostgreSQL.
In addition, I am familiar with a wide range of tools and technologies including BigQuery, Docker, Kubernetes, Terraform, GCP, AWS, Sanic, Tornado, JavaScript, ReactJS, Sentry, Jenkins, Celery, NSQ, GoCD, Grafana, Prometheus, jQuery, and Markdown.</description></item><item><title>Pivoting a Multi-Index Pandas DataFrame</title><link>https://ishmam-hossain.github.io/posts/pivoting-a-multi-index-pandas-dataframe/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/posts/pivoting-a-multi-index-pandas-dataframe/</guid><description>Pandas is a popular Python library for data analysis and manipulation. It provides a powerful data structure called the DataFrame, which is similar to a table in a relational database. DataFrames can have multiple levels of index, which can make them challenging to work with. In this blog post, we&amp;rsquo;ll show you how to pivot a multi-index Pandas DataFrame to create a new DataFrame with columns and rows.
Suppose we have a Pandas DataFrame that looks like this:</description></item><item><title>Generic Django Admin Class for All Models</title><link>https://ishmam-hossain.github.io/posts/django-generic-admin/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://ishmam-hossain.github.io/posts/django-generic-admin/</guid><description>Django provides a great admin interface that allows you to manage your models in a convenient way. However, if you have many models in your project, creating separate admin classes for each model can be a time-consuming task. In this blog post, we will show you how to create a generic Django admin class that you can use for all models in your project.
The generic admin class that we are going to create will display all the fields of the model except the id field.</description></item></channel></rss>